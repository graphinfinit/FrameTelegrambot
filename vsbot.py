"""
@framebot (—Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ –ª—é–¥–µ–π –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è)

"""
import telebot
from telebot import types

import time
from datetime import datetime, timedelta
import re

from settings import *
from dbclass import *

bot = telebot.TeleBot(TOKEN, threaded=False)  # –æ—Ç–∫–ª—é—á–µ–Ω–∞ –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ threaded=False
print('Start program...{}'.format(datetime.now()))

# –°—Ä–∞–∑—É —Å–æ–∑–¥–∞–¥–∏–º —Ç–∞–±–ª–∏—Ü—ã
initdb = SqliteDb()
initdb.create_table()
initdb.create_config_table()
initdb.create_limittable()
initdb.create_timetable()
initdb.close()


print('Ok...')



def is_allowed(string):
    characherRegex = re.compile(r'[^a-zA-Z0-9.:\s]')
    string = characherRegex.search(string)
    return not bool(string)


def get_shift_intervals(goodsymbol=GoodSymbol, default_value=SHIFT_INTERVALS):
    try:
        connect = SqliteDb()
        rows = connect.get_configs()
        connect.close()

        SHIFT_INTERVALS = {}
        for row in rows:
            q = dict(row)
            SHIFT_INTERVALS[str(q['id'])] = goodsymbol + q['shift']
        if bool(SHIFT_INTERVALS):
            return SHIFT_INTERVALS
        else:
            return default_value
    except Exception as exc:
        print(exc.args)


def get_shiftmax(default_value=SHIFTMAX):
    try:
        connect = SqliteDb()
        dt = connect.get_max()
        connect.close()
        dt = dict(dt[0])
    except Exception as exc:
        print(exc.args)

    if dt:
        if dt['vlimit'].isdigit():
            return int(dt['vlimit'])
    else:
        return default_value

def get_time():
    connect = SqliteDb()
    lim = connect.get_timelimit()
    connect.close()

    f = dict(lim[0])
    timestart = f['timestart']
    timelimit = f['timelimit']
    try:

        timestart = datetime.strptime(timestart, '%Y-%m-%d %H:%M:%S.%f') + timedelta(hours=3)
        timeend = timestart + timedelta(minutes=int(timelimit))
    except Exception as exc:
        print(exc.args)
    return [timestart, timeend]







def create_inlinekeyboarb(message):
    SHIFTMAX = get_shiftmax()
    SHIFT_INTERVALS = get_shift_intervals()
    limlist = get_time()
    db = SqliteDb()
    inlinekeyboarb = types.InlineKeyboardMarkup(row_width=2)

    for shift in SHIFT_INTERVALS:
        text = SHIFT_INTERVALS[shift]
        us = len(db.count_rows(shift=shift))
        if us == SHIFTMAX:
            text = SHIFT_INTERVALS[shift] + " ‚ùå –ó–∞–ø–∏—Å—å –∑–∞–∫—Ä—ã—Ç–∞"

        itembtnlook = types.InlineKeyboardButton(text='–£—á–∞—Å—Ç–Ω–∏–∫–∏ {}/{} üôã'.format(us, SHIFTMAX), callback_data=shift+'_look')
        itembtn1 = types.InlineKeyboardButton(text=text, callback_data=shift)

        inlinekeyboarb.row(itembtnlook, itembtn1)
    db.close()
    bot.send_message(message.chat.id,
                     text="–ó–∞–ø–∏—Å—å –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –æ—Ç–∫—Ä—ã—Ç–∞ ü•Åü•Å –í—ã–±–∏—Ä–∞–µ–º –≤—Ä–µ–º—è ‚û°.–£—Å–ø–µ–π—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è —Å {} –ø–æ {}Ô∏è –ø–æ –ú—Å–∫".format(str(limlist[0]),str(limlist[1])),
                     reply_markup=inlinekeyboarb)

def delete_or_insert(call):
    """
    :param call: –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    :return: answer_callback_query  –î–µ–ª–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –≤ –ë–î –∏ –ø–æ–∫–∞–∑–∞–≤–∞–µ—Ç –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ –æ–± —É–¥–∞–ª–µ–Ω–∏–µ –∏–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏.
    """
    SHIFTMAX = get_shiftmax()
    SHIFT_INTERVALS = get_shift_intervals()
    db = SqliteDb()
    value = db.get(user_id=call.from_user.id, shift=call.data)
    if value == True:
        db.delete(user_id=call.from_user.id, shift=call.data)
        db.close()
        bot.answer_callback_query(callback_query_id=call.id,
                                  show_alert=True,
                                  text="–ó–∞–ø–∏—Å—å –Ω–∞ —Å–º–µ–Ω—É {} —É–¥–∞–ª–µ–Ω–∞".format(SHIFT_INTERVALS[call.data]))
    else:
        if len(db.count_rows(shift=call.data)) == SHIFTMAX:
            db.close()
            bot.answer_callback_query(callback_query_id=call.id,
                                      show_alert=True,
                                      text="{}, –∑–∞–ø–∏—Å–∞—Ç—å—Å—è —É–∂–µ –Ω–µ–ª—å–∑—è. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é —Å–º–µ–Ω—É!".format(call.from_user.first_name))
        else:
            try:
                user_name = call.from_user.first_name + '_' + call.from_user.last_name
            except Exception:
                user_name = '–ë–µ–∑—ã–º—è–Ω–Ω—ã–π'

            status = db.insert(shift=call.data, user_id=call.from_user.id, user_name=user_name,
                               date=datetime.now())

            db.close()
            bot.answer_callback_query(callback_query_id=call.id,
                                      show_alert=True,
                                      text="{}, –í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ {}. –ù–∞–∂–º–∏—Ç–µ –µ—â–µ —Ä–∞–∑ –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è".format(call.from_user.first_name,
                                                                                    SHIFT_INTERVALS[call.data]))

@bot.message_handler(func=lambda m: True)
def process_main(message):
    SHIFT_INTERVALS = get_shift_intervals()
    if message.text == '/start':
        create_inlinekeyboarb(message)

    elif message.text == '/help':
        text = """–î–∞–º—ã –∏ –≥–æ—Å–ø–æ–¥–∞! –Ø –æ–±—ã—á–Ω—ã–π –±–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏.
        –ú–æ–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
          /start - –≤—ã–≤–µ—Å—Ç–∏ –æ–∫–Ω–æ –∑–∞–ø–∏—Å–∏
          /look - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ—Ö –∑–∞–ø–∏—Å–∞–≤—à–∏—Ö—Å—è 
        –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –¥–æ—Å—Ç—É–ø–Ω—ã–π —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É:
          /push - —É–¥–∞–ª–∏—Ç—å –≤—Å–µ—Ö –∑–∞–ø–∏—Å–∞–≤—à–∏—Ö—Å—è, –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –Ω–æ–≤–æ–µ –ø—É—Å—Ç–æ–µ –æ–∫–Ω–æ –∑–∞–ø–∏—Å–∏, –æ–±–Ω—É–ª–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∑–∞–ø–∏—Å–∏.
          /config - —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–∫–Ω–æ –∑–∞–ø–∏—Å–∏(–ø–æ—Å–ª–µ config –ø–µ—Ä–µ—á–∏—Å–ª–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–º–µ–Ω —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª):
        –î–ª—è –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –æ–∫–Ω–∞ –∑–∞–ø–∏—Å–∏:
           -–Ω–∞–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—ã –∏ —É–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ –∫–Ω–æ–ø–∫—É _–æ—Ç–ø—Ä–∞–≤–∏—Ç—å_ > –≤ –º–æ–±–∏–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏
           –∏–ª–∏ –ø—Ä–∞–≤–æ–π –∫–Ω–æ–ø–∫–æ–π –º—ã—à–∏ –≤ –¥–µ—Å–∫—Ç–æ–ø–µ
          /max - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –Ω–∞ –æ–¥–Ω—É —Å–º–µ–Ω—É
          /timelimit - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏–µ –æ–∫–Ω–∞ –∑–∞–ø–∏—Å–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö.–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 240–º–∏–Ω—É—Ç(4 —á–∞—Å–∞)
           
           @graphinfinit
           
        """
        bot.send_sticker(message.chat.id, 'CAACAgIAAxkBAAJIzV6ZAxBrxUQi0nrkXj1UrbMCRtIuAAJxbAACY4tGDL3Mn3hoWa1cGAQ')
        bot.send_message(message.chat.id,
        text=text)

    elif message.text == '/look':
        db = SqliteDb()
        for shift in SHIFT_INTERVALS:
            count_rows = db.count_rows(shift=shift)
            bot.send_message(message.chat.id,
                             text='–ó–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ {} - {} —á–µ–ª–æ–≤–µ–∫.'.format(SHIFT_INTERVALS[shift], len(count_rows)))
            for row in count_rows:
                row = dict(row)
                text ="<a href='tg://user?id={}'>{}</a>".format(row['user_id'], row['user_name'])
                bot.send_message(message.chat.id, text=text, parse_mode='HTML')
        db.close()

    elif message.text == '/push':
        if str(message.from_user.id) in ADMIN_LIST:
            db = SqliteDb()
            db.drop_table()
            db.create_table()
            db.update_timestart(timestart=datetime.now())

            db.close()
            bot.send_message(message.chat.id, text="<strong>.</strong>".format(
                message.from_user.first_name), parse_mode='HTML')
            create_inlinekeyboarb(message)
        else:
            bot.send_message(message.chat.id, text="<strong>!{}, —è —Å–ª—É—à–∞—é—Å—å —Ç–æ–ª—å–∫–æ —Ö–æ–∑—è–∏–Ω–∞.</strong>".format(message.from_user.first_name), parse_mode='HTML')

    elif message.text[:7] == '/config':
        if str(message.from_user.id) in ADMIN_LIST:
            try:
                data = message.text[8:]
                if is_allowed(data) and len(data) > 2:
                    shift_list = message.text[8:].split()
                    db = SqliteDb()
                    db.drop_config()
                    db.create_config_table()
                    for shift in shift_list:
                        db.insert_config(shift=shift)
                    db.close()

                    bot.send_message(message.chat.id, text="{}, –î–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!!!".format(
                        message.from_user.first_name))
                else:
                    bot.send_message(message.chat.id,
                    text="–û—à–∏–±–∫–∞. –í –Ω–∞–∑–≤–∞–Ω–∏–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –¥–æ–ø—É—Å—Ç–∏–º—ã —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã, –±—É–∫–≤—ã –∏ –¥–≤–æ–µ—Ç–æ—á–∏–µ ':'")

            except:
                bot.send_message(message.chat.id,
                text="–û—à–∏–±–∫–∞. –ü—Ä–∏–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ—Å—å —Ñ–æ—Ä–º–∞—Ç–∞ /config[–ø—Ä–æ–±–µ–ª]–ù–∞–∑–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞[–ø—Ä–æ–±–µ–ª]–ù–∞–∑–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ 2...")
        else:
            bot.send_message(message.chat.id, text="<strong>!{}, —è —Å–ª—É—à–∞—é—Å—å —Ç–æ–ª—å–∫–æ —Ö–æ–∑—è–∏–Ω–∞.</strong>".format(message.from_user.first_name), parse_mode='HTML')

    elif message.text[:4] == '/max':
        if str(message.from_user.id) in ADMIN_LIST:
            try:
                data = message.text[5:]
                if data.isdigit():
                    if int(data) >= 1:
                        db = SqliteDb()
                        db.drop_max()
                        db.create_limittable()
                        db.set_max(data)
                        db.close()
                        bot.send_message(message.chat.id,
                                         text="–ù–∞–≤–µ—Ä–Ω–æ–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å...")
                else:
                    bot.send_message(message.chat.id,
                                     text="–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.")
            except Exception:
                bot.send_message(message.chat.id,
                                 text="–û—à–∏–±–∫–∞!!")
    elif message.text[:10] == '/timelimit':
        if str(message.from_user.id) in ADMIN_LIST:
            if message.text[11:].isdigit():
                try:
                    timelimit = message.text[11:]
                    db = SqliteDb()
                    db.update_timelimit(timelimit=timelimit)
                    db.close
                    bot.send_message(message.chat.id,
                                     text="–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
                except Exception as exc:
                    print(exc.args)
            else:
                bot.send_message(message.chat.id,
                                 text="–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã")

        else:
            bot.send_message(message.chat.id, text="<strong>!{}, —è —Å–ª—É—à–∞—é—Å—å —Ç–æ–ª—å–∫–æ —Ö–æ–∑—è–∏–Ω–∞.</strong>", parse_mode='HTML')



    else:
        pass


@bot.callback_query_handler(func=lambda call: True)
def process_call(call):
    SHIFT_INTERVALS = get_shift_intervals()
    lim = get_time()
    timeend = lim[1]
    timenow = datetime.now() + timedelta(hours=3)



    for key_of_shift in SHIFT_INTERVALS:
        if call.data == key_of_shift:
            if timeend > timenow:
                delete_or_insert(call)
                bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
                create_inlinekeyboarb(call.message)
            else:
                bot.answer_callback_query(callback_query_id=call.id,
                                          show_alert=True,
                                          text='–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤—Ä–µ–º—è –∑–∞–ø–∏—Å–∏ –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤ –¥—Ä—É–≥–æ–π —Ä–∞–∑')


        if call.data == key_of_shift + '_look':
            db = SqliteDb()
            count_rows = db.count_rows(shift=key_of_shift)
            text = '–ó–∞–ø–∏—Å–∞–ª–∏—Å—å {} —á–µ–ª–æ–≤–µ–∫:  '.format(len(count_rows))
            for row in count_rows:
                row = dict(row)
                text += "  {}  ".format(row['user_name'])
            db.close()

            bot.answer_callback_query(callback_query_id=call.id,
                                      show_alert=True,
                                      text=text)

if __name__ == '__main__':
    while True:
        try:
            bot.infinity_polling(True)
        except Exception as problem:
            print(problem.args)
            time.sleep(20)
